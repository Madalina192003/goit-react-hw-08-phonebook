{"version":3,"file":"static/js/775.13b93eb9.chunk.js","mappings":"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","sources":["components/Register/Register.jsx","services/api.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { registerUser } from '../../services/api';\nimport { TextField, Button, Container, Typography, Alert } from '@mui/material';\nimport './Register.module.css';\n\nconst Register = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const navigate = useNavigate();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log('Submitting form with:', { name, email, password }); // Log pentru verificare\n    try {\n      const response = await registerUser({ name, email, password });\n      console.log('Response:', response); // Log pentru verificare\n      setSuccess('Utilizator creat cu succes!');\n      setError(null);\n      navigate('/login');\n    } catch (error) {\n      console.error('Registration error:', error); // Log pentru eroare\n      setError('A apărut o eroare la înregistrare');\n      setSuccess(null);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Typography variant=\"h4\" gutterBottom>\n        Register\n      </Typography>\n      <form onSubmit={handleSubmit} className=\"registerForm\">\n        {error && <Alert severity=\"error\">{error}</Alert>}\n        {success && <Alert severity=\"success\">{success}</Alert>}\n        <TextField\n          label=\"Name\"\n          type=\"text\"\n          fullWidth\n          variant=\"outlined\"\n          margin=\"normal\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />\n        <TextField\n          label=\"Email\"\n          type=\"email\"\n          fullWidth\n          variant=\"outlined\"\n          margin=\"normal\"\n          value={email}\n          onChange={e => setEmail(e.target.value)}\n        />\n        <TextField\n          label=\"Password\"\n          type=\"password\"\n          fullWidth\n          variant=\"outlined\"\n          margin=\"normal\"\n          value={password}\n          onChange={e => setPassword(e.target.value)}\n        />\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\n          Register\n        </Button>\n      </form>\n    </Container>\n  );\n};\n\nexport default Register;\n","const API_URL = 'https://connections-api.goit.global'; // URL-ul de bază al API-ului\n\nconst setAuthToken = token => {\n  localStorage.setItem('authToken', token);\n};\n\nconst getAuthToken = () => {\n  return localStorage.getItem('authToken');\n};\n\nexport const registerUser = async userData => {\n  const response = await fetch(`${API_URL}/users/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      name: userData.name,\n      email: userData.email,\n      password: userData.password,\n    }),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to register user');\n  }\n  const data = await response.json();\n  setAuthToken(data.token);\n  return data;\n};\n\nexport const loginUser = async userData => {\n  const response = await fetch(`${API_URL}/users/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to login user');\n  }\n  const data = await response.json();\n  setAuthToken(data.token);\n  return data;\n};\n\nexport const logoutUser = async () => {\n  const response = await fetch(`${API_URL}/users/logout`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${getAuthToken()}`,\n    },\n  });\n  if (!response.ok) {\n    throw new Error('Failed to logout user');\n  }\n  localStorage.removeItem('authToken');\n};\n\nexport const fetchContacts = async () => {\n  const response = await fetch(`${API_URL}/contacts`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${getAuthToken()}`,\n    },\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch contacts');\n  }\n  return response.json();\n};\n\nexport const addContact = async contactData => {\n  const response = await fetch(`${API_URL}/contacts`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${getAuthToken()}`,\n    },\n    body: JSON.stringify(contactData),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to add contact');\n  }\n  return response.json();\n};\n\nexport const deleteContact = async contactId => {\n  const response = await fetch(`${API_URL}/contacts/${contactId}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${getAuthToken()}`,\n    },\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete contact');\n  }\n};\n\nexport const updateContact = async (contactId, contactData) => {\n  const response = await fetch(`${API_URL}/contacts/${contactId}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${getAuthToken()}`,\n    },\n    body: JSON.stringify(contactData),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update contact');\n  }\n  return response.json();\n};\n"],"names":["_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","_useState7","_useState8","error","setError","_useState9","_useState10","success","setSuccess","navigate","useNavigate","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","e","response","_context","prev","next","preventDefault","console","log","registerUser","sent","t0","stop","_x","apply","arguments","_jsxs","Container","maxWidth","children","_jsx","Typography","variant","gutterBottom","onSubmit","className","Alert","severity","TextField","label","type","fullWidth","margin","value","onChange","target","Button","color","API_URL","setAuthToken","token","localStorage","setItem","getAuthToken","getItem","userData","data","fetch","concat","method","headers","body","JSON","stringify","ok","Error","json","abrupt","loginUser","_ref2","_callee2","_context2","_x2","fetchContacts","_ref4","_callee4","_context4","Authorization"],"sourceRoot":""}