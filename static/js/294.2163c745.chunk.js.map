{"version":3,"file":"static/js/294.2163c745.chunk.js","mappings":"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","sources":["components/Login/Login.jsx","services/api.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { loginUser } from '../../services/api';\nimport { TextField, Button, Container, Typography, Alert } from '@mui/material';\nimport './Login.module.css';\n\nconst Login = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log('Submitting form with:', { email, password }); // Log pentru verificare\n    try {\n      const response = await loginUser({ email, password });\n      console.log('Response:', response); // Log pentru verificare\n      setError(null);\n      navigate('/contacts');\n    } catch (error) {\n      console.error('Login error:', error); // Log pentru eroare\n      setError('A apărut o eroare la autentificare');\n    }\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Typography variant=\"h4\" gutterBottom>\n        Login\n      </Typography>\n      <form onSubmit={handleSubmit} className=\"loginForm\">\n        {error && <Alert severity=\"error\">{error}</Alert>}\n        <TextField\n          label=\"Email\"\n          type=\"email\"\n          fullWidth\n          variant=\"outlined\"\n          margin=\"normal\"\n          value={email}\n          onChange={e => setEmail(e.target.value)}\n        />\n        <TextField\n          label=\"Password\"\n          type=\"password\"\n          fullWidth\n          variant=\"outlined\"\n          margin=\"normal\"\n          value={password}\n          onChange={e => setPassword(e.target.value)}\n        />\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\n          Login\n        </Button>\n      </form>\n    </Container>\n  );\n};\n\nexport default Login;\n","const API_URL = 'https://connections-api.goit.global'; // URL-ul de bază al API-ului\n\nconst setAuthToken = token => {\n  localStorage.setItem('authToken', token);\n};\n\nconst getAuthToken = () => {\n  return localStorage.getItem('authToken');\n};\n\nexport const registerUser = async userData => {\n  const response = await fetch(`${API_URL}/users/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      name: userData.name,\n      email: userData.email,\n      password: userData.password,\n    }),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to register user');\n  }\n  const data = await response.json();\n  setAuthToken(data.token);\n  return data;\n};\n\nexport const loginUser = async userData => {\n  const response = await fetch(`${API_URL}/users/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to login user');\n  }\n  const data = await response.json();\n  setAuthToken(data.token);\n  return data;\n};\n\nexport const logoutUser = async () => {\n  const response = await fetch(`${API_URL}/users/logout`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${getAuthToken()}`,\n    },\n  });\n  if (!response.ok) {\n    throw new Error('Failed to logout user');\n  }\n  localStorage.removeItem('authToken');\n};\n\nexport const fetchContacts = async () => {\n  const response = await fetch(`${API_URL}/contacts`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${getAuthToken()}`,\n    },\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch contacts');\n  }\n  return response.json();\n};\n\nexport const addContact = async contactData => {\n  const response = await fetch(`${API_URL}/contacts`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${getAuthToken()}`,\n    },\n    body: JSON.stringify(contactData),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to add contact');\n  }\n  return response.json();\n};\n\nexport const deleteContact = async contactId => {\n  const response = await fetch(`${API_URL}/contacts/${contactId}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${getAuthToken()}`,\n    },\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete contact');\n  }\n};\n\nexport const updateContact = async (contactId, contactData) => {\n  const response = await fetch(`${API_URL}/contacts/${contactId}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${getAuthToken()}`,\n    },\n    body: JSON.stringify(contactData),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update contact');\n  }\n  return response.json();\n};\n"],"names":["_useState","useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","error","setError","navigate","useNavigate","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","e","response","_context","prev","next","preventDefault","console","log","loginUser","sent","t0","stop","_x","apply","arguments","_jsxs","Container","maxWidth","children","_jsx","Typography","variant","gutterBottom","onSubmit","className","Alert","severity","TextField","label","type","fullWidth","margin","value","onChange","target","Button","color","API_URL","setAuthToken","token","localStorage","setItem","getAuthToken","getItem","registerUser","userData","data","fetch","concat","method","headers","body","JSON","stringify","name","ok","Error","json","abrupt","_ref2","_callee2","_context2","_x2","fetchContacts","_ref4","_callee4","_context4","Authorization"],"sourceRoot":""}